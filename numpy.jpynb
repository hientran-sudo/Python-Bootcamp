import numpy as np
import matplotlib as plt

my_array = np.array([1.1, 9.2, 8.1, 4.7])

my_array.shape
my_array[2]
my_array.ndim

array_2d = np.array([[1, 2, 3, 9], [5, 6, 7, 8]])

print(f'array_2d has {array_2d.ndim} dimensions')
print(f'Its shape is {array_2d.shape}')
print(f'It has {array_2d.shape[0]} rows and {array_2d.shape[1]} columns')
print(array_2d)

array_2d[1,2]

#Here’s the entire first row:
array_2d[0, :]

#An array of 3 dimensions (or higher) is often referred to as a ”tensor”

mystery_array = np.array([[[0, 1, 2, 3],[4, 5, 6, 7]],[[7, 86, 6, 98],[5, 1, 0, 4]],[[5, 36, 32, 48], [97, 0, 27, 18]]])

print(f'We have {mystery_array.ndim} dimensions')
print(f'The shape is {mystery_array.shape}')

mystery_array[2, 1, 3]
mystery_array[2, 1, :]
mystery_array[:, :, 0]

#Use .arange()to createa a vector a with values ranging from 10 to 29
v = np.arange(10, 30)
print(v)

#Create an array containing only the last 3 values of a
print(v[17:19])
v[-3:]

#Create a subset with only the 4th, 5th, and 6th values
print(v[3:6])

#Create a subset of a containing all the values except for the first 12 (i.e., [22, 23, 24, 25, 26, 27, 28, 29])
print(v[12:])

#Create a subset that only contains the even numbers (i.e, every second number)
even_numbers = v[::2]
print(even_numbers)

#Reverse an array
# converting an array into list
vect_list=list(v)
# Reversing the vector(list) using the reverse() function
vect_list.reverse()
# converting a list into array
array_vect=np.array(vect_list)
# Printing the reversed vector
print(array_vect)

np.flip(v)

#Print out all the indices of the non-zero elements in this array: [6,0,9,0,0,5,0]
b = np.array([6,0,9,0,0,5,0])
b_nonzero = np.nonzero(b)

#Creating a random 3-D arrays
x = np.random.random((3, 3, 3))
print(x) 

#This code returns an ndarray with equally spaced intervals between the start and stop values
x = np.linspace(0, 100, num=9)
print(x)
x.shape
#Your Output:
#[  0.   12.5  25.   37.5  50.   62.5  75.   87.5 100. ]

y = np.linspace(start=-3, stop=3, num=9)
plt.plot(x, y)
plt.show()

noise = np.random.random((128,128,3))
print(noise.shape)
plt.imshow(noise)

#add two vectors 
v1 = np.array([4, 5, 2, 7])
v2 = np.array([2, 1, 3, 3])
print(v1 + v2)
print(v1 * v2)

array_2d = np.array([[1, 2, 3, 9], [5, 6, 7, 8]])
array_2d + 5
array_2d * 10 

a1 = np.array([[1, 3],
               [0, 1],
               [6, 2],
               [9, 7]])

b1 = np.array([[4, 1, 3],
               [5, 8, 5]])


